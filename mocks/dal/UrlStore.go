// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dal "gately/internal/dal"

	mock "github.com/stretchr/testify/mock"
)

// UrlStore is an autogenerated mock type for the UrlStore type
type UrlStore struct {
	mock.Mock
}

// AddUrlEntry provides a mock function with given fields: ctx, entry
func (_m *UrlStore) AddUrlEntry(ctx context.Context, entry *dal.UrlMappingEntry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dal.UrlMappingEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckIfUrlExists provides a mock function with given fields: ctx, url, isLong
func (_m *UrlStore) CheckIfUrlExists(ctx context.Context, url string, isLong bool) bool {
	ret := _m.Called(ctx, url, isLong)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) bool); ok {
		r0 = rf(ctx, url, isLong)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteUrlEntry provides a mock function with given fields: ctx, shortUrl
func (_m *UrlStore) DeleteUrlEntry(ctx context.Context, shortUrl string) error {
	ret := _m.Called(ctx, shortUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMappedUrl provides a mock function with given fields: ctx, shortUrl
func (_m *UrlStore) GetMappedUrl(ctx context.Context, shortUrl string) (string, error) {
	ret := _m.Called(ctx, shortUrl)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrlMetrics provides a mock function with given fields: ctx, start, end, asc
func (_m *UrlStore) GetUrlMetrics(ctx context.Context, start int64, end int64, asc bool) ([]*dal.UrlMappingEntry, error) {
	ret := _m.Called(ctx, start, end, asc)

	var r0 []*dal.UrlMappingEntry
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) []*dal.UrlMappingEntry); ok {
		r0 = rf(ctx, start, end, asc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dal.UrlMappingEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(ctx, start, end, asc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUrlHitCount provides a mock function with given fields: ctx, shortUrl
func (_m *UrlStore) UpdateUrlHitCount(ctx context.Context, shortUrl string) error {
	ret := _m.Called(ctx, shortUrl)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, shortUrl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUrlStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewUrlStore creates a new instance of UrlStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUrlStore(t mockConstructorTestingTNewUrlStore) *UrlStore {
	mock := &UrlStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
